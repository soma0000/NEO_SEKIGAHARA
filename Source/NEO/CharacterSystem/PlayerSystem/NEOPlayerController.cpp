// Fill out your copyright notice in the Description page of Project Settings.


#include "NEOPlayerController.h"
#include "Kismet/GameplayStatics.h"
#include "Camera/CameraComponent.h"
#include "NEO/GameSystem/NEOGameMode.h"
#include "PlayerBase.h"

ANEOPlayerController::ANEOPlayerController()
	: DefaultRemainingLives(2)
	, RespownPosHeight(300.f)
	, RemainingLives(DefaultRemainingLives)
	, PlayerIsDead(false)
{

}

// ゲーム開始時の処理
void ANEOPlayerController::BeginPlay()
{
	Super::BeginPlay();

	// ゲームモード取得
	pGameMode = Cast<ANEOGameMode>(UGameplayStatics::GetGameMode(GetWorld()));

	// プレイヤー取得
	pPlayer = Cast<APlayerBase>(UGameplayStatics::GetPlayerCharacter(this, 0));

	//ConsoleCommand("r.SetRes 45×25w");		// Steam Dech用
	//ConsoleCommand("r.SetRes 45×25f");

	//ConsoleCommand("r.SetRes 3840×2160w");	// 4K対応用
	//ConsoleCommand("r.SetRes 3840×2160f");

	ConsoleCommand("r.SetRes 1920×1080w");		// 通常
	ConsoleCommand("r.SetRes 1920×1080f");
}


/*
 * 関数名　　　　：ResetPlayerStatus()
 * 処理内容　　　：プレイヤーの入力受付(移動処理)
 * 引数１　　　　：FInputActionValue& Value・・・入力量
 * 戻り値　　　　：なし
 */
void ANEOPlayerController::ResetPlayerStatus()
{
	// 残機設定
	RemainingLives = DefaultRemainingLives;
}


/*
 * 関数名　　　　：DestroyPlayer()
 * 処理内容　　　：プレイヤーを削除
 * 戻り値　　　　：なし
 */
void ANEOPlayerController::DestroyPlayer()
{
	// プレイヤーかゲームモードの情報が取れていないとき
	if (!pPlayer || !pGameMode) { return; }

	// プレイヤー削除
	pPlayer->Destroy();

	// プレイヤーをNULLに
	pPlayer = nullptr;

	// プレイヤーを死亡状態へ
	PlayerIsDead = true;

	// ゲームを次の状態へ
	pGameMode->SetNextGameState();
}


/*
 * 関数名　　　　：RespawnPlayer()
 * 処理内容　　　：プレイヤーをリスポーン
 * 戻り値　　　　：なし
 */
void ANEOPlayerController::RespawnPlayer()
{
	// プレイヤーかゲームモードの情報が取れていないとき
	if (!pPlayer || !pGameMode) { return; }

	// プレイヤーが死亡した位置取得
	FTransform RespownTransForm = pPlayer->GetActorTransform();

	// プレイヤーを削除
	pPlayer->Destroy();

	// プレイヤーをNULLに
	pPlayer = nullptr;

	// プレイヤーの残機を1減らす
	ReduceRemainingLives();

	// 復活位置を少し高く
	const FVector RespownPos = RespownTransForm.GetTranslation();
	RespownTransForm.SetTranslation(FVector(RespownPos.X, RespownPos.Y, RespownPos.Z + RespownPosHeight));

	// 新しいプレイヤーを生成
	pPlayer = Cast<APlayerBase>(GetWorld()->SpawnActor<APawn>(pGameMode->GetDefaultPawnClass(), RespownTransForm));

	// リスポーンのカメラ処理
	SetViewTargetWithBlend(pGameMode->GetNowPlayerCamera(), 0.f);
}


/*
 * 関数名　　　　：GetPlayerLocation()
 * 処理内容　　　：プレイヤーの座標を返す
 * 戻り値　　　　：プレイヤーの座標
 */
FVector ANEOPlayerController::GetPlayerLocation()const
{
	// プレイヤーの情報が取れていないとき
	if (!pPlayer){ return FVector::ZeroVector; }

	// プレイヤーの座標を返す
	return pPlayer->GetActorLocation();
}

/*
 * 関数名　　　　：GetNowCameraRotation()
 * 処理内容　　　：カメラの回転
 * 戻り値　　　　：なし
 */
FRotator ANEOPlayerController::GetNowCameraRotation()const
{
	if (pGameMode)
	{
		// 現在のカメラを取得
		AActor* NowCamera = pGameMode->GetNowPlayerCamera();

		// 回転を取得して返す
		if (NowCamera)
		{
			// カメラのコンポーネント取得
			UCameraComponent* CameraComponent = NowCamera->FindComponentByClass<UCameraComponent>();
			if (CameraComponent)
			{
				return CameraComponent->GetComponentRotation();
			}
		}
	}

	return FRotator::ZeroRotator;
}


/*
 * 関数名　　　　：GetIsDebugKeyPressed()
 * 処理内容　　　：デバッグキーに設定されているキーが押されているか
 * 戻り値　　　　：なし
 */
bool ANEOPlayerController::GetIsDebugKeyPressed()const
{
	for (int i = 0; i < sizeof(KeyNames) / sizeof(FName); ++i)
	{
		if (IsInputKeyDown(KeyNames[i]))
		{
			return false;
		}
	}

	return true;
}